#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockInteraction:
    def __init__(self, user_id=123456789):
        self.user = MockUser(user_id)
        self.response = MockResponse()
        self.followup = MockFollowup()
        self.message = None
        self.guild = MockGuild()

    async def response(self):
        return self.response

    async def followup(self):
        return self.followup


class MockUser:
    def __init__(self, user_id):
        self.id = user_id
        self.mention = f"<@{user_id}>"


class MockResponse:
    def __init__(self):
        self.is_done = False

    async def send_message(self, content=None, embed=None, view=None, ephemeral=True):
        logger.info(f"Mock response: {content}")
        self.is_done = True

    async def defer(self, ephemeral=True):
        logger.info("Mock defer")
        self.is_done = True

    async def edit_message(self, embed=None, view=None):
        logger.info("Mock edit_message")


class MockFollowup:
    async def send(self, content=None, embed=None, view=None, ephemeral=True):
        logger.info(f"Mock followup: {content}")


class MockGuild:
    def __init__(self):
        self.id = 987654321


class MockPlayer:
    def __init__(self):
        self.playlist = []
        self.current_index = -1
        self.current = None
        self.paused = False
        self.volume = 100
        self.text_channel = MockTextChannel()
        self.now_playing_message = None
        self._handling_track_end = False
        self.state = MockState()

    async def play_previous(self):
        logger.info("Mock play_previous")
        return True

    async def skip(self):
        logger.info("Mock skip")

    async def pause(self, paused):
        logger.info(f"Mock pause: {paused}")
        self.paused = paused

    async def cleanup_disconnect(self):
        logger.info("Mock cleanup_disconnect")


class MockState:
    def __init__(self):
        self.loop_mode = 0  # NONE


class MockTextChannel:
    def __init__(self):
        self.guild = MockGuild()


class MockTrack:
    def __init__(self, title="Test Track", author="Test Artist"):
        self.title = title
        self.author = author
        self.length = 180000  # 3 minutes
        self.uri = "test://track/123"


async def test_track_select_update():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ update –≤ TrackSelect"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º TrackSelect.update()")

    try:
        from ui.track_select import TrackSelect

        player = MockPlayer()
        player.history = [MockTrack("Track 1"), MockTrack("Track 2")]

        track_select = TrackSelect(player)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ update
        await track_select.update()

        logger.info("‚úÖ TrackSelect.update() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ TrackSelect.update(): {e}")
        return False


async def test_view_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ views"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ views")

    try:
        from ui.views import MusicPlayerView
        from ui.base_view import EmojiSettings

        player = MockPlayer()
        interaction = MockInteraction()

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏
        emoji_settings = EmojiSettings()

        # –°–æ–∑–¥–∞–µ–º view
        view = MusicPlayerView(player=player, emoji_settings=emoji_settings)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        error = Exception("Test error")
        await view.on_error(interaction, error, view.children[0])

        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ views —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ views: {e}")
        return False


async def test_button_callbacks():
    """–¢–µ—Å—Ç callback —Ñ—É–Ω–∫—Ü–∏–π –∫–Ω–æ–ø–æ–∫"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º callback —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫")

    try:
        from ui.views import MusicPlayerView
        from ui.base_view import EmojiSettings

        player = MockPlayer()
        player.playlist = [MockTrack("Track 1"), MockTrack("Track 2")]
        player.current = MockTrack("Current Track")
        player.current_index = 0

        interaction = MockInteraction()

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏
        emoji_settings = EmojiSettings()

        # –°–æ–∑–¥–∞–µ–º view
        view = MusicPlayerView(player=player, emoji_settings=emoji_settings)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback —Ñ—É–Ω–∫—Ü–∏–∏
        test_results = []

        # –¢–µ—Å—Ç shuffle
        try:
            await view.shuffle_button_callback(interaction)
            test_results.append("‚úÖ shuffle_button_callback")
        except Exception as e:
            test_results.append(f"‚ùå shuffle_button_callback: {e}")

        # –¢–µ—Å—Ç previous
        try:
            await view.previous_button_callback(interaction)
            test_results.append("‚úÖ previous_button_callback")
        except Exception as e:
            test_results.append(f"‚ùå previous_button_callback: {e}")

        # –¢–µ—Å—Ç skip
        try:
            await view.skip_button_callback(interaction)
            test_results.append("‚úÖ skip_button_callback")
        except Exception as e:
            test_results.append(f"‚ùå skip_button_callback: {e}")

        # –¢–µ—Å—Ç loop
        try:
            await view.loop_button_callback(interaction)
            test_results.append("‚úÖ loop_button_callback")
        except Exception as e:
            test_results.append(f"‚ùå loop_button_callback: {e}")

        # –¢–µ—Å—Ç pause
        try:
            await view.pause_button_callback(interaction)
            test_results.append("‚úÖ pause_button_callback")
        except Exception as e:
            test_results.append(f"‚ùå pause_button_callback: {e}")

        # –¢–µ—Å—Ç stop
        try:
            await view.stop_button_callback(interaction)
            test_results.append("‚úÖ stop_button_callback")
        except Exception as e:
            test_results.append(f"‚ùå stop_button_callback: {e}")

        for result in test_results:
            logger.info(result)

        success_count = sum(1 for r in test_results if r.startswith("‚úÖ"))
        total_count = len(test_results)

        logger.info(
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
        )
        return success_count == total_count

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ callback —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False


async def test_safe_defer_or_respond():
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º _safe_defer_or_respond")

    try:
        from ui.views import MusicPlayerView
        from ui.base_view import EmojiSettings

        player = MockPlayer()
        interaction = MockInteraction()

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏
        emoji_settings = EmojiSettings()

        # –°–æ–∑–¥–∞–µ–º view
        view = MusicPlayerView(player=player, emoji_settings=emoji_settings)

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await view._safe_defer_or_respond(interaction, "Test message")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (defer)
        interaction.response.is_done = False
        await view._safe_defer_or_respond(interaction)

        logger.info("‚úÖ _safe_defer_or_respond —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _safe_defer_or_respond: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")

    tests = [
        test_track_select_update,
        test_view_error_handling,
        test_button_callbacks,
        test_safe_defer_or_respond,
    ]

    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)

    success_count = sum(results)
    total_count = len(results)

    logger.info(
        f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    )

    if success_count == total_count:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

    return success_count == total_count


if __name__ == "__main__":
    asyncio.run(main())
