#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)


# –ú–æ–∫ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockGuild:
    def __init__(self, guild_id: int):
        self.id = guild_id


class MockTextChannel:
    def __init__(self, guild: MockGuild):
        self.guild = guild


class MockPlayer:
    def __init__(self, guild_id: int):
        self.guild_id = guild_id
        self.text_channel = MockTextChannel(MockGuild(guild_id))
        self._volume = 100
        self.state = MockState()

    @property
    def volume(self) -> int:
        return self._volume

    @volume.setter
    def volume(self, value: int):
        self._volume = value


class MockState:
    def __init__(self):
        self.bass_boost = False
        self.nightcore = False
        self.vaporwave = False
        self.loop_mode = 0  # NONE


async def test_volume_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏")

    try:
        from services import mongo_service

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–≤—É–º—è —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        guild_1_id = 123456789
        guild_2_id = 987654321

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        await mongo_service.set_guild_volume(guild_1_id, 75)
        await mongo_service.set_guild_volume(guild_2_id, 125)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ
        volume_1 = await mongo_service.get_guild_volume(guild_1_id)
        volume_2 = await mongo_service.get_guild_volume(guild_2_id)

        logger.info(f"–°–µ—Ä–≤–µ—Ä {guild_1_id}: –≥—Ä–æ–º–∫–æ—Å—Ç—å = {volume_1}%")
        logger.info(f"–°–µ—Ä–≤–µ—Ä {guild_2_id}: –≥—Ä–æ–º–∫–æ—Å—Ç—å = {volume_2}%")

        if volume_1 == 75 and volume_2 == 125:
            logger.info("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {volume_1} != 75 –∏–ª–∏ {volume_2} != 125"
            )
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–∑–æ–ª—è—Ü–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
        return False


async def test_settings_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏")

    try:
        from services import mongo_service

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–≤—É–º—è —Ä–∞–∑–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
        guild_1_id = 111111111
        guild_2_id = 222222222

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        settings_1 = {
            "color": "red",
            "custom_emojis": {"NK_VOLUME": "üîä"},
            "volume": 80,
        }
        settings_2 = {
            "color": "blue",
            "custom_emojis": {"NK_VOLUME": "üîâ"},
            "volume": 120,
        }

        await mongo_service.set_guild_settings(guild_1_id, settings_1)
        await mongo_service.set_guild_settings(guild_2_id, settings_2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω–æ
        saved_settings_1 = await mongo_service.get_guild_settings(guild_1_id)
        saved_settings_2 = await mongo_service.get_guild_settings(guild_2_id)

        logger.info(
            f"–°–µ—Ä–≤–µ—Ä {guild_1_id}: —Ü–≤–µ—Ç = {saved_settings_1.get('color')}, –≥—Ä–æ–º–∫–æ—Å—Ç—å = {saved_settings_1.get('volume')}"
        )
        logger.info(
            f"–°–µ—Ä–≤–µ—Ä {guild_2_id}: —Ü–≤–µ—Ç = {saved_settings_2.get('color')}, –≥—Ä–æ–º–∫–æ—Å—Ç—å = {saved_settings_2.get('volume')}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
        if (
            saved_settings_1.get("color") == "red"
            and saved_settings_1.get("volume") == 80
            and saved_settings_2.get("color") == "blue"
            and saved_settings_2.get("volume") == 120
        ):
            logger.info("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False


async def test_player_volume_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–ª–µ–µ—Ä–æ–≤ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–ª–µ–µ—Ä–æ–≤")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        player_1 = MockPlayer(333333333)
        player_2 = MockPlayer(444444444)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
        player_1.volume = 60
        player_2.volume = 140

        logger.info(
            f"–ü–ª–µ–µ—Ä 1 (—Å–µ—Ä–≤–µ—Ä {player_1.guild_id}): –≥—Ä–æ–º–∫–æ—Å—Ç—å = {player_1.volume}%"
        )
        logger.info(
            f"–ü–ª–µ–µ—Ä 2 (—Å–µ—Ä–≤–µ—Ä {player_2.guild_id}): –≥—Ä–æ–º–∫–æ—Å—Ç—å = {player_2.volume}%"
        )

        if player_1.volume == 60 and player_2.volume == 140:
            logger.info("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–ª–µ–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–ª–µ–µ—Ä–æ–≤: {player_1.volume} != 60 –∏–ª–∏ {player_2.volume} != 140"
            )
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–∑–æ–ª—è—Ü–∏–∏ –ø–ª–µ–µ—Ä–æ–≤: {e}")
        return False


async def test_effects_isolation():
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–æ–ª—è—Ü–∏—é —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏")

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        state_1 = MockState()
        state_2 = MockState()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        state_1.bass_boost = True
        state_1.nightcore = False
        state_2.bass_boost = False
        state_2.nightcore = True

        logger.info(
            f"–°–µ—Ä–≤–µ—Ä 1: bass_boost = {state_1.bass_boost}, nightcore = {state_1.nightcore}"
        )
        logger.info(
            f"–°–µ—Ä–≤–µ—Ä 2: bass_boost = {state_2.bass_boost}, nightcore = {state_2.nightcore}"
        )

        if (
            state_1.bass_boost
            and not state_1.nightcore
            and not state_2.bass_boost
            and state_2.nightcore
        ):
            logger.info("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–∑–æ–ª—è—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {e}")
        return False


async def test_database_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    try:
        from services import mongo_service

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º guild_id
        test_guild_id = 555555555
        test_settings = {
            "color": "green",
            "volume": 90,
            "custom_emojis": {"NK_HEART": "üíö"},
        }

        await mongo_service.set_guild_settings(test_guild_id, test_settings)
        saved_settings = await mongo_service.get_guild_settings(test_guild_id)

        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {saved_settings}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ guild_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        if (
            saved_settings.get("guild_id") == str(test_guild_id)
            and saved_settings.get("color") == "green"
            and saved_settings.get("volume") == 90
        ):
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏")

    tests = [
        test_volume_isolation,
        test_settings_isolation,
        test_player_volume_isolation,
        test_effects_isolation,
        test_database_structure,
    ]

    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)

    success_count = sum(results)
    total_count = len(results)

    logger.info(
        f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    )

    if success_count == total_count:
        logger.info(
            "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò–∑–æ–ª—è—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
        )
        logger.info("‚úÖ –ö–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä –∏–º–µ–µ—Ç —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        logger.info("   - –ì—Ä–æ–º–∫–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        logger.info("   - –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
        logger.info("   - –¶–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ")
        logger.info("   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

    return success_count == total_count


if __name__ == "__main__":
    asyncio.run(main())
