#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–µ–µ—Ä–∞
"""

import asyncio
from utils.validators import is_player_owner


class MockPlayer:
    """–ú–æ–∫ –ø–ª–µ–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.current = None
        self.playlist = []
        self.view = None


class MockTrack:
    """–ú–æ–∫ —Ç—Ä–µ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, requester_id):
        self.requester = MockUser(requester_id)
        self.title = "Test Track"
        self.uri = "test://track"


class MockUser:
    """–ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, user_id):
        self.id = user_id
        self.display_name = f"User {user_id}"


class MockInteraction:
    """–ú–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, user_id):
        self.user = MockUser(user_id)
        self.response = MockResponse()


class MockResponse:
    """–ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.done = False

    def is_done(self):
        return self.done


async def test_ownership_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–µ–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–ª–µ–µ—Ä–∞...")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    owner_id = 123456789
    other_user_id = 987654321

    player = MockPlayer()
    owner = MockUser(owner_id)
    other_user = MockUser(other_user_id)

    # –¢–µ—Å—Ç 1: –ü–ª–µ–µ—Ä –±–µ–∑ —Ç—Ä–µ–∫–æ–≤
    print("\nüìã –¢–µ—Å—Ç 1: –ü–ª–µ–µ—Ä –±–µ–∑ —Ç—Ä–µ–∫–æ–≤")
    result = is_player_owner(player, owner)
    print(f"–í–ª–∞–¥–µ–ª–µ—Ü –±–µ–∑ —Ç—Ä–µ–∫–æ–≤: {result} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: False)")

    # –¢–µ—Å—Ç 2: –ü–ª–µ–µ—Ä —Å —Ç—Ä–µ–∫–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    print("\nüìã –¢–µ—Å—Ç 2: –ü–ª–µ–µ—Ä —Å —Ç—Ä–µ–∫–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞")
    track = MockTrack(owner_id)
    player.current = track
    result = is_player_owner(player, owner)
    print(f"–í–ª–∞–¥–µ–ª–µ—Ü —Å —Ç—Ä–µ–∫–æ–º: {result} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: True)")

    # –¢–µ—Å—Ç 3: –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç—Ä–µ–∫–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    print("\nüìã –¢–µ—Å—Ç 3: –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç—Ä–µ–∫–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞")
    result = is_player_owner(player, other_user)
    print(f"–î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: False)")

    # –¢–µ—Å—Ç 4: –ü–ª–µ–µ—Ä —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    print("\nüìã –¢–µ—Å—Ç 4: –ü–ª–µ–µ—Ä —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞")
    player.current = None
    player.playlist = [MockTrack(owner_id)]
    result = is_player_owner(player, owner)
    print(f"–í–ª–∞–¥–µ–ª–µ—Ü —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º: {result} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: True)")

    # –¢–µ—Å—Ç 5: –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    print("\nüìã –¢–µ—Å—Ç 5: –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞")
    result = is_player_owner(player, other_user)
    print(f"–î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º: {result} (–æ–∂–∏–¥–∞–µ—Ç—Å—è: False)")

    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_ownership_system())
