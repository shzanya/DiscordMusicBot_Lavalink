import logging
from dataclasses import dataclass
from enum import Enum
from typing import Any, Dict
import discord
import time
from discord.ext import commands
import wavelink

from config.constants import Colors
from core.player import HarmonyPlayer
from ui.embeds import create_error_embed

logger = logging.getLogger(__name__)

class EffectType(Enum):
    BASS_BOOST = "bass_boost"
    NIGHTCORE = "nightcore"
    VAPORWAVE = "vaporwave"
    TREBLE_BOOST = "treble_boost"  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
    KARAOKE = "karaoke"
    TREMOLO = "tremolo"
    VIBRATO = "vibrato"
    DISTORTION = "distortion"

@dataclass
class EffectConfig:
    name: str
    emoji: str
    description: str
    filters: Dict[str, Any]
    incompatible_with: list = None

    def __post_init__(self):
        if self.incompatible_with is None:
            self.incompatible_with = []

class AudioEffectsManager:
    """üéõÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É–¥–∏–æ—ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
    
    EFFECT_CONFIGS = {
        EffectType.BASS_BOOST: EffectConfig(
            name="–ë–∞—Å–±—É—Å—Ç",
            emoji="üîä",
            description="–£—Å–∏–ª–µ–Ω–∏–µ –Ω–∏–∑–∫–∏—Ö —á–∞—Å—Ç–æ—Ç",
            filters={
                "equalizer": {
                    "bands": [
                        {"band": 0, "gain": 0.6},
                        {"band": 1, "gain": 0.7},
                        {"band": 2, "gain": 0.8},
                        {"band": 3, "gain": 0.4},
                        {"band": 4, "gain": 0.0},
                    ]
                }
            }
        ),
        
        EffectType.NIGHTCORE: EffectConfig(
            name="–ù–∞–π—Ç–∫–æ—Ä",
            emoji="üåô",
            description="–£—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ–Ω–∞",
            filters={
                "timescale": {"speed": 1.2, "pitch": 1.2, "rate": 1.0}
            },
            incompatible_with=[EffectType.VAPORWAVE]
        ),
        
        EffectType.VAPORWAVE: EffectConfig(
            name="–í–µ–π–ø–æ—Ä–≤–µ–π–≤",
            emoji="üåä",
            description="–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ç–æ–Ω–∞",
            filters={
                "timescale": {"speed": 0.8, "pitch": 0.8, "rate": 1.0},
                "equalizer": {
                    "bands": [
                        {"band": 0, "gain": -0.2},
                        {"band": 1, "gain": -0.2},
                        {"band": 2, "gain": -0.1},
                    ]
                }
            },
            incompatible_with=[EffectType.NIGHTCORE]
        ),
        
        EffectType.TREBLE_BOOST: EffectConfig(
            name="–¢—Ä–µ–±–ª –±—É—Å—Ç",
            emoji="üîÜ",
            description="–£—Å–∏–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç",
            filters={
                "equalizer": {
                    "bands": [
                        {"band": 10, "gain": 0.5},
                        {"band": 11, "gain": 0.6},
                        {"band": 12, "gain": 0.7},
                        {"band": 13, "gain": 0.8},
                        {"band": 14, "gain": 0.6},
                    ]
                }
            }
        ),
        
        EffectType.KARAOKE: EffectConfig(
            name="–ö–∞—Ä–∞–æ–∫–µ",
            emoji="üé§",
            description="–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–≤–æ–∫–∞–ª)",
            filters={
                "karaoke": {
                    "level": 1.0,
                    "monoLevel": 1.0,
                    "filterBand": 220.0,
                    "filterWidth": 100.0
                }
            }
        ),
        
        EffectType.TREMOLO: EffectConfig(
            name="–¢—Ä–µ–º–æ–ª–æ",
            emoji="„Ä∞Ô∏è",
            description="–ú–æ–¥—É–ª—è—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥—ã",
            filters={
                "tremolo": {"frequency": 2.0, "depth": 0.5}
            }
        ),
        
        EffectType.VIBRATO: EffectConfig(
            name="–í–∏–±—Ä–∞—Ç–æ",
            emoji="üéµ",
            description="–ú–æ–¥—É–ª—è—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã",
            filters={
                "vibrato": {"frequency": 2.0, "depth": 0.5}
            }
        ),
        
        EffectType.DISTORTION: EffectConfig(
            name="–î–∏—Å—Ç–æ—Ä—à–Ω",
            emoji="‚ö°",
            description="–ò—Å–∫–∞–∂–µ–Ω–∏–µ –∑–≤—É–∫–∞",
            filters={
                "distortion": {
                    "sinOffset": 0.0,
                    "sinScale": 1.0,
                    "cosOffset": 0.0,
                    "cosScale": 1.0,
                    "tanOffset": 0.0,
                    "tanScale": 1.0,
                    "offset": 0.0,
                    "scale": 1.2
                }
            }
        )
    }

    @classmethod
    async def set_effects(cls, player: HarmonyPlayer, **kwargs):
        try:
            filters = wavelink.Filters()

            if kwargs.get('bass', False):
                filters.equalizer.set(bands=[
                    {"band": 0, "gain": 0.6},
                    {"band": 1, "gain": 0.7},
                    {"band": 2, "gain": 0.8},
                    {"band": 3, "gain": 0.4},
                    {"band": 4, "gain": 0.0},
                ])
            if kwargs.get('treble', False):
                filters.equalizer.set(bands=[
                    {"band": 10, "gain": 0.5},
                    {"band": 11, "gain": 0.6},
                    {"band": 12, "gain": 0.7},
                    {"band": 13, "gain": 0.8},
                    {"band": 14, "gain": 0.6},
                ])
            if kwargs.get('nightcore', False):
                filters.timescale.set(speed=1.2, pitch=1.2, rate=1.0)
            if kwargs.get('vaporwave', False):
                filters.timescale.set(speed=0.8, pitch=0.8, rate=1.0)
                filters.equalizer.set(bands=[
                    {"band": 0, "gain": -0.2},
                    {"band": 1, "gain": -0.2},
                    {"band": 2, "gain": -0.1},
                ])
            if kwargs.get('karaoke', False):
                filters.karaoke.set(level=1.0, mono_level=1.0, filter_band=220.0, filter_width=100.0)
            if kwargs.get('tremolo', False):
                filters.tremolo.set(frequency=2.0, depth=0.5)
            if kwargs.get('vibrato', False):
                filters.vibrato.set(frequency=2.0, depth=0.5)
            if kwargs.get('distortion', False):
                filters.distortion.set(
                    sin_offset=0.0, sin_scale=1.0,
                    cos_offset=0.0, cos_scale=1.0,
                    tan_offset=0.0, tan_scale=1.0,
                    offset=0.0, scale=1.2
                )

            await player.set_filters(filters)
            logger.info(f"üéöÔ∏è [AudioEffectsManager] Applied filters: {kwargs}")
        except Exception as e:
            logger.error(f"‚ùå Failed to set effects via AudioEffectsManager: {e}")
            raise

        player.speed_override = 1.0
        if kwargs.get('nightcore'):
            player.speed_override = 1.2
        elif kwargs.get('vaporwave'):
            player.speed_override = 0.8

        player.start_time_real = time.time()

    @classmethod
    def get_effect_config(cls, effect_type: EffectType) -> EffectConfig:
        return cls.EFFECT_CONFIGS.get(effect_type)

    @classmethod
    def check_compatibility(cls, active_effects: list, new_effect: EffectType) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        config = cls.get_effect_config(new_effect)
        if not config:
            return False, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"
            
        for active_effect in active_effects:
            if active_effect in config.incompatible_with:
                active_config = cls.get_effect_config(active_effect)
                return False, f"–ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å {active_config.name if active_config else active_effect.value}"
                
        return True, ""

    @classmethod
    async def apply_effects(cls, player: HarmonyPlayer, effects: Dict[EffectType, bool]) -> bool:
        try:
            kwargs = {
                "bass": False,
                "treble": False,
                "nightcore": False,
                "vaporwave": False,
                "karaoke": False,
                "tremolo": False,
                "vibrato": False,
                "distortion": False,
            }

            active = [e for e, on in effects.items() if on]

            for effect in active:
                if effect == EffectType.BASS_BOOST:
                    kwargs["bass"] = True
                elif effect.name == "TREBLE_BOOST":
                    kwargs["treble"] = True
                elif effect == EffectType.NIGHTCORE:
                    kwargs["nightcore"] = True
                elif effect == EffectType.VAPORWAVE:
                    kwargs["vaporwave"] = True
                elif effect == EffectType.KARAOKE:
                    kwargs["karaoke"] = True
                elif effect == EffectType.TREMOLO:
                    kwargs["tremolo"] = True
                elif effect == EffectType.VIBRATO:
                    kwargs["vibrato"] = True
                elif effect == EffectType.DISTORTION:
                    kwargs["distortion"] = True

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
            await player.set_effects(**kwargs)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            for eff, enabled in effects.items():
                setattr(player.state, eff.value, enabled)

            logger.info(f"üéöÔ∏è Applied effects: {[e.value for e in active]}")
            return True

        except Exception as e:
            logger.error(f"‚ùå Failed apply_effects: {e}")
            return False


class EffectsView(discord.ui.View):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    
    def __init__(self, player: HarmonyPlayer):
        super().__init__(timeout=300)
        self.player = player
        self.effects_manager = AudioEffectsManager()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç –º–µ–Ω—é
        self.add_item(EffectsSelect(player))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.add_item(ClearEffectsButton())
        self.add_item(RefreshButton())

class EffectsSelect(discord.ui.Select):
    """–°–µ–ª–µ–∫—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
    
    def __init__(self, player: HarmonyPlayer):
        self.player = player
        self.effects_manager = AudioEffectsManager()
        
        options = []
        for effect_type in EffectType:
            config = self.effects_manager.get_effect_config(effect_type)
            is_active = getattr(player.state, effect_type.value, False)
            
            options.append(discord.SelectOption(
                label=config.name,
                value=effect_type.value,
                description=config.description,
                emoji=config.emoji,
                default=is_active
            ))
        
        super().__init__(
            placeholder="üéöÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è...",
            min_values=0,
            max_values=len(options),
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        selected_effects = {
            EffectType(value): True for value in self.values
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        all_effects = {}
        for effect_type in EffectType:
            all_effects[effect_type] = effect_type in selected_effects
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        active_effects = [e for e, enabled in all_effects.items() if enabled]
        for effect in active_effects:
            other_effects = [e for e in active_effects if e != effect]
            compatible, reason = self.effects_manager.check_compatibility(other_effects, effect)
            if not compatible:
                await interaction.response.send_message(
                    embed=create_error_embed("–û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", f"–≠—Ñ—Ñ–µ–∫—Ç –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º: {reason}"),
                    ephemeral=True
                )
                return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        success = await self.effects_manager.apply_effects(self.player, all_effects)
        if not success:
            await interaction.response.send_message(
                embed=create_error_embed("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã!"),
                ephemeral=True
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        embed = self._create_status_embed(all_effects)
        view = EffectsView(self.player)
        await interaction.response.edit_message(embed=embed, view=view)
    
    def _create_status_embed(self, effects: Dict[EffectType, bool]) -> discord.Embed:
        """–°–æ–∑–¥–∞–µ—Ç embed —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        embed = discord.Embed(
            title="üéöÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            color=Colors.PRIMARY
        )
        
        active_effects = []
        for effect_type, enabled in effects.items():
            if enabled:
                config = self.effects_manager.get_effect_config(effect_type)
                active_effects.append(f"{config.emoji} {config.name}")
        
        if active_effects:
            embed.add_field(
                name="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                value="\n".join(active_effects),
                inline=False
            )
        else:
            embed.add_field(
                name="‚ö™ –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                value="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
                inline=False
            )
        
        embed.set_footer(text="üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º")
        return embed

class ClearEffectsButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__(
            label="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
            style=discord.ButtonStyle.secondary,
            emoji="üßπ"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view: EffectsView = self.view
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        all_effects = {effect: False for effect in EffectType}
        success = await view.effects_manager.apply_effects(view.player, all_effects)
        
        if not success:
            await interaction.response.send_message(
                embed=create_error_embed("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã!"),
                ephemeral=True
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        embed = discord.Embed(
            title="üéöÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            color=Colors.PRIMARY
        )
        embed.add_field(
            name="‚ö™ –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
            value="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
            inline=False
        )
        embed.set_footer(text="üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º")
        
        new_view = EffectsView(view.player)
        await interaction.response.edit_message(embed=embed, view=new_view)



class RefreshButton(discord.ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self):
        super().__init__(
            label="–û–±–Ω–æ–≤–∏—Ç—å",
            style=discord.ButtonStyle.primary,
            emoji="üîÑ"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view: EffectsView = self.view
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        current_effects = {}
        for effect_type in EffectType:
            current_effects[effect_type] = getattr(view.player.state, effect_type.value, False)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        embed = discord.Embed(
            title="üéöÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            color=Colors.PRIMARY
        )
        
        active_effects = []
        for effect_type, enabled in current_effects.items():
            if enabled:
                config = view.effects_manager.get_effect_config(effect_type)
                active_effects.append(f"{config.emoji} {config.name}")
        
        if active_effects:
            embed.add_field(
                name="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                value="\n".join(active_effects),
                inline=False
            )
        else:
            embed.add_field(
                name="‚ö™ –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                value="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
                inline=False
            )
        
        embed.set_footer(text="üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º")
        
        new_view = EffectsView(view.player)
        await interaction.response.edit_message(embed=embed, view=new_view)


class EffectsCommands(commands.Cog, name="üéöÔ∏è –≠—Ñ—Ñ–µ–∫—Ç—ã"):
    """üéöÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""

    def __init__(self, bot):
        self.bot = bot
        self.effects_manager = AudioEffectsManager()

    @discord.app_commands.command(name="effects", description="üéöÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏")
    async def effects_panel(self, interaction: discord.Interaction):
        """üéöÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
        player: HarmonyPlayer = interaction.guild.voice_client
        if not player:
            return await interaction.response.send_message(
                embed=create_error_embed("–û—à–∏–±–∫–∞", "–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!"),
                ephemeral=True
            )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        current_effects = {}
        for effect_type in EffectType:
            current_effects[effect_type] = getattr(player.state, effect_type.value, False)

        # –°–æ–∑–¥–∞–µ–º embed
        embed = discord.Embed(
            title="üéöÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
            color=Colors.PRIMARY
        )
        
        active_effects = []
        for effect_type, enabled in current_effects.items():
            if enabled:
                config = self.effects_manager.get_effect_config(effect_type)
                active_effects.append(f"{config.emoji} {config.name}")
        
        if active_effects:
            embed.add_field(
                name="üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                value="\n".join(active_effects),
                inline=False
            )
        else:
            embed.add_field(
                name="‚ö™ –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                value="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤",
                inline=False
            )
        
        embed.set_footer(text="üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        view = EffectsView(player)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)



async def setup(bot):
    await bot.add_cog(EffectsCommands(bot))
