import asyncio
import hashlib
import io
import logging
import re
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path
from typing import List, Set, Tuple

import aiohttp
from discord.ext import commands
from PIL import Image


class EmojiManager(commands.Cog):
    def __init__(self, bot):
        self.replace_existing = False  # —Ç—É—Ç TRue –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ü–≤–µ—Ç–∞
        self.bot = bot
        self.logger = logging.getLogger(__name__)
        self.session = None
        self.executor = ThreadPoolExecutor(max_workers=8)

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤
        self.color_presets = {
            "red": (255, 85, 85),
            "blue": (85, 170, 255),
            "green": (85, 255, 85),
            "yellow": (255, 255, 85),
            "purple": (170, 85, 255),
            "orange": (255, 170, 85),
            "pink": (255, 85, 170),
            "cyan": (85, 255, 255),
            "white": (255, 255, 255),
            "black": (50, 50, 50),
            "gray": (150, 150, 150),
            "brown": (165, 115, 85),
            "lime": (170, 255, 85),
            "teal": (85, 255, 170),
            "indigo": (85, 85, 255),
            "maroon": (170, 85, 85),
            "navy": (85, 85, 170),
            "olive": (170, 170, 85),
            "aqua": (85, 255, 255),
            "fuchsia": (255, 85, 255),
            "silver": (192, 192, 192),
            "gold": (255, 215, 0),
            "coral": (255, 127, 80),
            "salmon": (250, 128, 114),
            "crimson": (220, 20, 60),
        }

        bot.loop.create_task(self.auto_generate_colored_emojis())

    async def __aenter__(self):
        self.session = aiohttp.ClientSession(
            connector=aiohttp.TCPConnector(limit=100, limit_per_host=50),
            timeout=aiohttp.ClientTimeout(total=30),
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
        self.executor.shutdown(wait=False)

    def cog_unload(self):
        if self.session and not self.session.closed:
            asyncio.create_task(self.session.close())
        self.executor.shutdown(wait=False)

    async def auto_generate_colored_emojis(self):
        await self.bot.wait_until_ready()

        async with self:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ –æ–¥–∏–Ω —Ä–∞–∑
            app_emojis = await self.bot.fetch_application_emojis()
            self.existing_emojis_map = {emoji.name: emoji for emoji in app_emojis}
            existing_names = set(self.existing_emojis_map.keys())

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ (–±–µ–∑ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤)
            original_emojis = [
                emoji
                for emoji in app_emojis
                if not any(
                    emoji.name.endswith(f"_{color}") for color in self.color_presets
                )
            ]

            self.logger.info(f"üé® –ù–∞–π–¥–µ–Ω–æ {len(original_emojis)} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —ç–º–æ–¥–∑–∏")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = []
            for color in self.color_presets:
                task = self.create_colored_variants(
                    original_emojis, color, existing_names
                )
                tasks.append(task)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            semaphore = asyncio.Semaphore(5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤

            async def run_with_semaphore(task):
                async with semaphore:
                    return await task

            results = await asyncio.gather(
                *[run_with_semaphore(task) for task in tasks]
            )

            total_created = sum(results)
            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total_created} –Ω–æ–≤—ã—Ö —Ü–≤–µ—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏")

            await self.generate_emojis_py()

    async def create_colored_variants(
        self, original_emojis: List, color: str, existing_names: Set[str]
    ) -> int:
        """–°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞"""
        target_color = self.color_presets[color.lower()]
        created_count = 0

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–º–æ–¥–∑–∏
        tasks = []
        for emoji in original_emojis:
            new_name = self.generate_color_name(emoji.name, color)
            if new_name in existing_names:
                if self.replace_existing:
                    task = self.process_single_emoji(
                        original_emoji=emoji,
                        target_color=target_color,
                        new_name=new_name,
                        old_emoji=self.existing_emojis_map.get(new_name),
                    )
                    tasks.append(task)
            else:
                task = self.process_single_emoji(
                    original_emoji=emoji,
                    target_color=target_color,
                    new_name=new_name,
                    old_emoji=None,
                )
                tasks.append(task)
                task = self.process_single_emoji(emoji, target_color, new_name)
                tasks.append(task)

        if not tasks:
            return 0

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        semaphore = asyncio.Semaphore(3)  # –ú–∞–∫—Å–∏–º—É–º 3 —ç–º–æ–¥–∑–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

        async def process_with_semaphore(task):
            async with semaphore:
                result = await task
                if result:
                    await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è API
                return result

        results = await asyncio.gather(
            *[process_with_semaphore(task) for task in tasks], return_exceptions=True
        )
        created_count = sum(1 for r in results if r is True)

        self.logger.info(f"‚úÖ {color}: —Å–æ–∑–¥–∞–Ω–æ {created_count} —ç–º–æ–¥–∑–∏")
        return created_count

    async def process_single_emoji(
        self,
        original_emoji,
        target_color: Tuple[int, int, int],
        new_name: str,
        old_emoji=None,
    ) -> bool:
        original_bytes = await self.download_emoji_optimized(original_emoji.url)

        # –ü–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–µ–º
        loop = asyncio.get_event_loop()
        recolored_bytes = await loop.run_in_executor(
            self.executor, self.recolor_image_optimized, original_bytes, target_color
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ —Å—Ç–∞—Ä–æ–º—É?
        if old_emoji:
            try:
                old_bytes = await self.download_emoji_optimized(old_emoji.url)
                if self.images_identical(old_bytes, recolored_bytes):
                    return False  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await old_emoji.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–º–æ–¥–∑–∏
                await asyncio.sleep(0.1)  # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–∞—É–∑–∞
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {new_name}: {e}")

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏
        await self.bot.create_application_emoji(name=new_name, image=recolored_bytes)
        return True

    def generate_color_name(self, base_name: str, color: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —ç–º–æ–¥–∑–∏"""
        suffix = f"_{color}"
        max_len = 32

        if len(base_name + suffix) > max_len:
            base_name = base_name[: max_len - len(suffix)]

        return base_name + suffix

    async def download_emoji_optimized(self, url: str) -> bytes:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —ç–º–æ–¥–∑–∏"""
        try:
            async with self.session.get(url) as resp:
                if resp.status != 200:
                    raise Exception(f"HTTP {resp.status}")
                return await resp.read()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
            raise

    def recolor_image_optimized(
        self, image_bytes: bytes, target_color: Tuple[int, int, int]
    ) -> bytes:
        """–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø–µ—Ä–µ–∫—Ä–∞—Å–∫–∞: —Ç—è–Ω–µ—Ç —Ü–≤–µ—Ç–∞ –∫ —Ü–µ–ª–µ–≤–æ–º—É + —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å"""
        try:
            img = Image.open(io.BytesIO(image_bytes)).convert("RGBA")

            try:
                import numpy as np

                img_array = np.array(img, dtype=np.float32)
                alpha = img_array[:, :, 3] > 0

                rgb = img_array[:, :, :3]
                target_rgb = np.array(target_color, dtype=np.float32)

                # –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ (—Ç—è–Ω–µ–º –∫–∞–∂–¥—ã–π —Ü–≤–µ—Ç –∫ —Ü–µ–ª–µ–≤–æ–º—É)
                blend_ratio = 0.85  # 0.0 ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, 1.0 ‚Äî –ø–æ–ª–Ω—ã–π —Ü–≤–µ—Ç —Ü–µ–ª–∏
                recolored_rgb = rgb * (1 - blend_ratio) + target_rgb * blend_ratio

                # –ü–æ–≤—ã—à–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —É—Å–∏–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
                recolored_rgb = np.clip(recolored_rgb * 1.3, 0, 255)

                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –ø–∏–∫—Å–µ–ª—è–º
                img_array[:, :, :3] = np.where(alpha[:, :, None], recolored_rgb, rgb)

                img = Image.fromarray(img_array.astype(np.uint8), "RGBA")

            except ImportError:
                # –ë–µ–∑ NumPy ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ
                pixels = img.load()
                for x in range(img.width):
                    for y in range(img.height):
                        r, g, b, a = pixels[x, y]
                        if a == 0:
                            continue

                        blend_ratio = 0.85
                        new_r = int(
                            r * (1 - blend_ratio) + target_color[0] * blend_ratio
                        )
                        new_g = int(
                            g * (1 - blend_ratio) + target_color[1] * blend_ratio
                        )
                        new_b = int(
                            b * (1 - blend_ratio) + target_color[2] * blend_ratio
                        )

                        # –£—Å–∏–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
                        new_r = min(255, int(new_r * 1.3))
                        new_g = min(255, int(new_g * 1.3))
                        new_b = min(255, int(new_b * 1.3))

                        pixels[x, y] = (new_r, new_g, new_b, a)

            output = io.BytesIO()
            img.save(output, format="PNG", optimize=True)
            return output.getvalue()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è: {e}")
            raise

    def images_identical(self, img1_bytes: bytes, img2_bytes: bytes) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return hashlib.md5(img1_bytes).digest() == hashlib.md5(img2_bytes).digest()

    async def generate_emojis_py(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å —ç–º–æ–¥–∑–∏"""
        try:
            emojis = await self.bot.fetch_application_emojis()

            lines = [
                "# ‚ö†Ô∏è –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —ç–º–æ–¥–∑–∏",
                "# –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π –≤—Ä—É—á–Ω—É—é!",
                "",
                "class Emojis:",
                '    """üöÄ –ö–ª–∞—Å—Å —Å–æ –≤—Å–µ–º–∏ application —ç–º–æ–¥–∑–∏"""',
                "",
            ]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            sorted_emojis = sorted(emojis, key=lambda e: e.name)

            for emoji in sorted_emojis:
                safe_name = re.sub(r"[^a-zA-Z0-9_]", "_", emoji.name).upper()
                lines.append(f'    {safe_name} = "{emoji}"')

            lines.extend(
                [
                    "",
                    "    @classmethod",
                    "    def get_all(cls):",
                    "        return {k: v for k, v in cls.__dict__.items() if not k.startswith('_') and k != 'get_all'}",
                    "",
                    "    @classmethod",
                    "    def get_by_color(cls, color: str):",
                    "        return {k: v for k, v in cls.get_all().items() if k.endswith(f'_{color.upper()}')}",
                ]
            )

            Path("emojis.py").write_text("\n".join(lines), encoding="utf-8")
            self.logger.info("‚úÖ –§–∞–π–ª emojis.py –æ–±–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ emojis.py: {e}")


async def setup(bot):
    await bot.add_cog(EmojiManager(bot))
