import discord
from discord.ext import commands
from typing import Type
from config.constants import Emojis, Colors
from services.database import DatabaseService
from ui.embeds import create_error_embed

class PlaylistManagementCommands(commands.Cog, name="üìÅ –ü–ª–µ–π–ª–∏—Å—Ç—ã"):
    """üìÅ –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏"""

    def __init__(self, bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–≥ —Å –±–æ—Ç–æ–º –∏ —Å–µ—Ä–≤–∏—Å–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.bot = bot
        self.db: Type[DatabaseService] = bot.db

    @commands.command(name='createplaylist', aliases=['newpl'])
    async def create_playlist_command(self, ctx: commands.Context, name: str):
        """üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞

        Args:
            ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
            name: –ò–º—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        """
        if len(name) > 50:
            return await ctx.reply(embed=create_error_embed(
                "–ò–º—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤!"
            ))

        playlist = await self.db.create_playlist(ctx.author.id, name)

        embed = discord.Embed(
            title=f"{Emojis.ADD} –ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω",
            description=discord.utils.escape_markdown(name),  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            color=Colors.SUCCESS
        )
        await ctx.reply(embed=embed)

    @commands.command(name='addtoplaylist', aliases=['pladd'])
    async def add_to_playlist_command(self, ctx: commands.Context, playlist_name: str):
        """‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç

        Args:
            ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
            playlist_name: –ò–º—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
        """
        player = ctx.voice_client
        if not player or not player.current:
            return await ctx.reply(embed=create_error_embed(
                "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!"
            ))

        playlist = await self.db.get_playlist(ctx.author.id, playlist_name)
        if not playlist:
            return await ctx.reply(embed=create_error_embed(
                f"–ü–ª–µ–π–ª–∏—Å—Ç '{discord.utils.escape_markdown(playlist_name)}' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            ))

        track = player.current
        await self.db.add_to_playlist(playlist.id, track.title, track.uri)

        embed = discord.Embed(
            title=f"{Emojis.ADD} –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
            description=(
                f"{discord.utils.escape_markdown(track.title)} ‚Üí "
                f"{discord.utils.escape_markdown(playlist_name)}"
            ),
            color=Colors.SUCCESS
        )
        await ctx.reply(embed=embed)

    @commands.command(name='playlists', aliases=['pls'])
    async def playlists_command(self, ctx: commands.Context, page: int = 1):
        """üìú –°–ø–∏—Å–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            ctx: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
        """
        playlists = await self.db.get_user_playlists(ctx.author.id)
        if not playlists:
            return await ctx.reply(embed=create_error_embed(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤!"
            ))

        embed = discord.Embed(
            title=f"{Emojis.QUEUE} –í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã",
            color=Colors.MUSIC
        )

        per_page = 10
        pages = (len(playlists) + per_page - 1) // per_page
        page = max(1, min(page, pages))

        start = (page - 1) * per_page
        end = start + per_page

        for i, playlist in enumerate(playlists[start:end], start=start + 1):
            embed.add_field(
                name=f"{i}. {discord.utils.escape_markdown(playlist.name)}",
                value=f"{len(playlist.tracks)} —Ç—Ä–µ–∫–æ–≤",
                inline=False
            )

        embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{pages}")
        await ctx.reply(embed=embed)
async def setup(bot):
    await bot.add_cog(PlaylistManagementCommands(bot))
