"""
üé® –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è UI View —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ Discord UI
"""

import logging
from typing import Optional, Dict
import discord
from discord import ui
from config.constants import get_button_emoji
from services import mongo_service

logger = logging.getLogger(__name__)


class EmojiSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–∏"""

    def __init__(
        self, color: str = "default", custom_emojis: Optional[Dict[str, str]] = None
    ):
        self.color = color or "default"
        self.custom_emojis = custom_emojis or {}

    @classmethod
    async def from_guild(cls, guild_id: Optional[int]) -> "EmojiSettings":
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∏–ª—å–¥–∏–∏"""
        if not guild_id:
            logger.debug("No guild_id provided, using default settings")
            return cls()

        try:
            logger.debug(f"Loading emoji settings for guild {guild_id}")
            settings = await mongo_service.get_guild_settings(guild_id) or {}
            logger.debug(f"Loaded settings: {settings}")

            color = settings.get("color", "default")
            custom_emojis = settings.get("custom_emojis", {})

            logger.debug(f"Using color: {color}, custom_emojis: {custom_emojis}")

            return cls(color=color, custom_emojis=custom_emojis)
        except Exception as e:
            logger.warning(f"Failed to load emoji settings for guild {guild_id}: {e}")
            return cls()

    def get_emoji(self, emoji_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–∏–ª—å–¥–∏–∏"""
        return get_button_emoji(emoji_name, self.color, self.custom_emojis)


class BaseEmojiView(ui.View):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è View —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏"""

    def __init__(self, emoji_settings: Optional[EmojiSettings] = None, **kwargs):
        super().__init__(**kwargs)
        self._emoji_settings = emoji_settings or EmojiSettings()
        self._emoji_map: Dict[str, str] = {}
        self._initialized = False

    @classmethod
    async def create(
        cls,
        guild_id: Optional[int] = None,
        emoji_settings: Optional[EmojiSettings] = None,
        **kwargs,
    ) -> "BaseEmojiView":
        """–°–æ–∑–¥–∞–Ω–∏–µ View —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–º–æ–¥–∑–∏"""
        if not emoji_settings and guild_id:
            emoji_settings = await EmojiSettings.from_guild(guild_id)

        instance = cls(emoji_settings=emoji_settings, **kwargs)
        await instance._initialize_emojis()
        return instance

    async def _initialize_emojis(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫"""
        if self._initialized:
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ View
        self._setup_emoji_mapping()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –∫ –∫–Ω–æ–ø–∫–∞–º
        self._apply_emojis_to_buttons()

        self._initialized = True
        logger.debug(f"Initialized emojis for {self.__class__.__name__}")

    def _setup_emoji_mapping(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ —ç–º–æ–¥–∑–∏ - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö"""
        pass

    def _apply_emojis_to_buttons(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∫ –∫–Ω–æ–ø–∫–∞–º"""
        for item in self.children:
            if isinstance(item, discord.ui.Button):
                custom_id = getattr(item, "custom_id", None)
                if custom_id and custom_id in self._emoji_map:
                    emoji_name = self._emoji_map[custom_id]

                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ pause
                    if custom_id == "music:pause" and hasattr(self, "player"):
                        is_paused = getattr(self.player, "paused", False)
                        emoji_name = "NK_MUSICPAUSE" if is_paused else "NK_MUSICPLAY"

                    emoji = self._emoji_settings.get_emoji(emoji_name)

                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
                    if emoji and emoji != "‚ùì":
                        item.emoji = emoji
                        item.label = None  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                    else:
                        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–µ—Ç–∫—É
                        item.label = "‚Ä¢"

    def update_emoji(self, custom_id: str, emoji_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
        for item in self.children:
            if (
                isinstance(item, discord.ui.Button)
                and getattr(item, "custom_id", None) == custom_id
            ):
                emoji = self._emoji_settings.get_emoji(emoji_name)
                if emoji and emoji != "‚ùì":
                    item.emoji = emoji
                    item.label = None
                else:
                    item.label = "‚Ä¢"
                break

    def get_emoji(self, emoji_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return self._emoji_settings.get_emoji(emoji_name)

    @property
    def emoji_settings(self) -> EmojiSettings:
        """–î–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —ç–º–æ–¥–∑–∏"""
        return self._emoji_settings


class EmojiButton(ui.Button):
    """–ö–Ω–æ–ø–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏"""

    def __init__(self, emoji_name: str, emoji_settings: EmojiSettings, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        emoji = emoji_settings.get_emoji(emoji_name)

        # –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        if not emoji or emoji == "‚ùì":
            kwargs["label"] = kwargs.get("label", "‚Ä¢")
            kwargs["emoji"] = None
        else:
            kwargs["emoji"] = emoji
            kwargs["label"] = None

        super().__init__(**kwargs)
        self._emoji_name = emoji_name
        self._emoji_settings = emoji_settings

    def update_emoji(self, emoji_name: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∫–Ω–æ–ø–∫–∏"""
        emoji = self._emoji_settings.get_emoji(emoji_name)
        if emoji and emoji != "‚ùì":
            self.emoji = emoji
            self.label = None
        else:
            self.emoji = None
            self.label = "‚Ä¢"
