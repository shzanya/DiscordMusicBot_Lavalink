"""
üìä –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
"""
import asyncio
import logging
from typing import Dict, Optional

import discord
import wavelink

from utils.formatters import format_duration, format_track_title, format_requester_info

logger = logging.getLogger(__name__)


class NowPlayingUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
    
    def __init__(self):
        self.active_messages: Dict[int, dict] = {}
        self.update_task: Optional[asyncio.Task] = None
        self.update_interval = 3  # –°–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        
    def start_updater(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.update_task is None or self.update_task.done():
            self.update_task = asyncio.create_task(self._update_loop())
            logger.debug("Progress updater started")
    
    def stop_updater(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.update_task and not self.update_task.done():
            self.update_task.cancel()
            logger.debug("Progress updater stopped")
    
    async def register_message(
        self, 
        guild_id: int, 
        message: discord.Message, 
        player, 
        track: wavelink.Playable, 
        requester: discord.Member
    ):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if not message or not player:
            logger.warning(f"Cannot register message for guild {guild_id}: invalid message or player")
            return
            
        self.active_messages[guild_id] = {
            'message': message,
            'player': player,
            'track': track,
            'requester': requester,
            'last_update': 0,
            'last_position': 0,
            'error_count': 0
        }
        
        logger.debug(f"Registered message for guild {guild_id}")
        self.start_updater()
    
    def unregister_message(self, guild_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if guild_id in self.active_messages:
            del self.active_messages[guild_id]
            logger.debug(f"Unregistered message for guild {guild_id}")
        
        if not self.active_messages:
            self.stop_updater()
    
    async def _update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            while self.active_messages:
                items = list(self.active_messages.items())
                
                for guild_id, info in items:
                    try:
                        await self._update_message(guild_id, info)
                    except Exception as e:
                        logger.debug(f"Update error for guild {guild_id}: {e}")
                        
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                        info['error_count'] = info.get('error_count', 0) + 1
                        
                        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        if info['error_count'] > 5:
                            logger.warning(f"Too many errors for guild {guild_id}, unregistering")
                            self.unregister_message(guild_id)
                
                await asyncio.sleep(self.update_interval)
                
        except asyncio.CancelledError:
            logger.debug("Update loop cancelled")
        except Exception as e:
            logger.error(f"Critical update loop error: {e}")

    async def _update_message(self, guild_id: int, info: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = info.get('message')
            player = info.get('player')

            if not message or not player:
                self.unregister_message(guild_id)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
            if not hasattr(player, 'playing') or not player.playing or not player.current:
                self.unregister_message(guild_id)
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ
            try:
                current_position = int(getattr(player, 'position', 0) or 0)
            except (ValueError, TypeError):
                current_position = 0

            current_track = player.current

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
            force_update = False
            if info.get('track') != current_track:
                info['track'] = current_track
                force_update = True
                logger.debug(f"Track changed for guild {guild_id}, forcing update")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∑–∏—Ü–∏–∏)
            last_position = info.get('last_position', 0)
            if not force_update and abs(current_position - last_position) < 5000:  # 5 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                return

            info['last_position'] = current_position

            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed
            embed = self._create_progress_embed(current_track, player, info.get('requester'))
            
            # –ü–æ–ª—É—á–∞–µ–º view –µ—Å–ª–∏ –µ—Å—Ç—å
            view = getattr(player, 'view', None)
            
            await message.edit(embed=embed, view=view)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            info['error_count'] = 0
            
        except discord.NotFound:
            logger.debug(f"Message not found for guild {guild_id}")
            self.unregister_message(guild_id)
        except discord.Forbidden:
            logger.warning(f"No permission to edit message for guild {guild_id}")
            self.unregister_message(guild_id)
        except discord.HTTPException as e:
            if e.status == 429:  # Rate limit
                logger.warning(f"Rate limited for guild {guild_id}")
                await asyncio.sleep(2)
            else:
                logger.debug(f"HTTP error for guild {guild_id}: {e}")
                raise
        except Exception as e:
            logger.debug(f"Update error for guild {guild_id}: {e}")
            raise

    def _create_progress_embed(self, track: wavelink.Playable, player, requester) -> discord.Embed:
        """–°–æ–∑–¥–∞–Ω–∏–µ embed —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        from config.constants import Colors
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
        track_title = format_track_title(track, max_length=50)
        author = getattr(track, 'author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
        requester_info = format_requester_info(requester)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        current_pos = int(getattr(player, 'position', 0) or 0)
        total_duration = track.length or 0
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = self._create_progress_bar(current_pos, total_duration)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        current_time = format_duration(current_pos)
        total_time = format_duration(total_duration)
        
        # –°–æ–∑–¥–∞–µ–º embed
        embed = discord.Embed(
            title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
            description=f"**[{track_title}]({getattr(track, 'uri', '')})**\n{author}",
            color=Colors.MUSIC
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        embed.add_field(
            name="–ü—Ä–æ–≥—Ä–µ—Å—Å",
            value=f"{progress_bar}\n`{current_time}` / `{total_time}`",
            inline=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑—á–∏–∫–µ
        embed.add_field(
            name="–ó–∞–∫–∞–∑–∞–ª",
            value=requester_info,
            inline=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞
        status = "‚è∏Ô∏è –ü–∞—É–∑–∞" if getattr(player, 'paused', False) else "‚ñ∂Ô∏è –ò–≥—Ä–∞–µ—Ç"
        embed.add_field(
            name="–°—Ç–∞—Ç—É—Å",
            value=status,
            inline=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
        volume = getattr(player, 'volume', 100)
        embed.add_field(
            name="–ì—Ä–æ–º–∫–æ—Å—Ç—å",
            value=f"{volume}%",
            inline=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
        artwork = getattr(track, 'artwork', None) or getattr(track, 'thumbnail', None)
        if artwork:
            embed.set_thumbnail(url=artwork)
        
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp
        embed.timestamp = discord.utils.utcnow()
        
        return embed
    
    def _create_progress_bar(self, current: int, total: int, length: int = 20) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if total <= 0:
            return "‚ñ¨" * length
        
        progress = min(current / total, 1.0)
        filled_length = int(length * progress)
        
        if filled_length == 0:
            return "üîò" + "‚ñ¨" * (length - 1)
        elif filled_length >= length:
            return "‚ñ¨" * (length - 1) + "üîò"
        else:
            return "‚ñ¨" * filled_length + "üîò" + "‚ñ¨" * (length - filled_length - 1)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
now_playing_updater = NowPlayingUpdater()


async def send_now_playing_message(
    channel, 
    track: wavelink.Playable, 
    player, 
    requester: discord.Member
) -> discord.Message:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    from ui.views import MusicPlayerView
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π embed
    embed = now_playing_updater._create_progress_embed(track, player, requester)
    
    # –°–æ–∑–¥–∞–µ–º view —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    view = MusicPlayerView(player, None, requester)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await channel.send(embed=embed, view=view)
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º message –∫ view –∏ player
    view.message = message
    player.view = view
    player.now_playing_message = message
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await now_playing_updater.register_message(
        channel.guild.id,
        message,
        player,
        track,
        requester
    )
    
    logger.info(f"Now playing message sent for guild {channel.guild.id}")
    return message


async def update_now_playing_message(
    player,
    track: wavelink.Playable,
    requester: discord.Member = None
) -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–µ–∫–æ–º"""
    try:
        if not hasattr(player, 'now_playing_message') or not player.now_playing_message:
            return False
        
        embed = now_playing_updater._create_progress_embed(track, player, requester)
        view = getattr(player, 'view', None)
        
        await player.now_playing_message.edit(embed=embed, view=view)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ updater
        guild_id = player.guild.id
        if guild_id in now_playing_updater.active_messages:
            now_playing_updater.active_messages[guild_id]['track'] = track
            if requester:
                now_playing_updater.active_messages[guild_id]['requester'] = requester
        
        return True
        
    except Exception as e:
        logger.error(f"Failed to update now playing message: {e}")
        return False


def cleanup_updater():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    now_playing_updater.stop_updater()
    logger.info("Progress updater cleaned up")


def get_active_messages_count() -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return len(now_playing_updater.active_messages)


async def force_update_all():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    for guild_id, info in list(now_playing_updater.active_messages.items()):
        try:
            await now_playing_updater._update_message(guild_id, info)
        except Exception as e:
            logger.error(f"Force update failed for guild {guild_id}: {e}")


# Utility functions for external use
def is_message_being_updated(guild_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏"""
    return guild_id in now_playing_updater.active_messages


def get_message_info(guild_id: int) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏"""
    return now_playing_updater.active_messages.get(guild_id)
