import discord
import wavelink
import math
import asyncio
from typing import Optional, Dict
from config.constants import Colors, Emojis
from core.player import HarmonyPlayer
from utils.formatters import format_duration
from ui.views import MusicControllerView





class NowPlayingUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏"""
    
    def __init__(self):
        self.active_messages: Dict[int, dict] = {}  # guild_id -> message_info
        self.update_task = None
        
    def start_updater(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.update_task is None or self.update_task.done():
            self.update_task = asyncio.create_task(self._update_loop())
    
    def stop_updater(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        if self.update_task and not self.update_task.done():
            self.update_task.cancel()
    
    async def register_message(self, guild_id: int, message: discord.Message, player: HarmonyPlayer, track: wavelink.Playable, requester: discord.Member):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.active_messages[guild_id] = {
            'message': message,
            'player': player,
            'track': track,
            'requester': requester,
            'last_update': 0
        }
        self.start_updater()
    
    def unregister_message(self, guild_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if guild_id in self.active_messages:
            del self.active_messages[guild_id]
        
        if not self.active_messages:
            self.stop_updater()
    
    async def _update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            while self.active_messages:
                for guild_id, info in list(self.active_messages.items()):
                    try:
                        await self._update_message(guild_id, info)
                    except Exception as e:
                        print(f"[DEBUG] Update error for guild {guild_id}: {e}")
                        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        self.unregister_message(guild_id)
                
                await asyncio.sleep(10)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
        except asyncio.CancelledError:
            pass
        except Exception as e:
            print(f"[DEBUG] Update loop error: {e}")
 
    
    async def _update_message(self, guild_id: int, info: dict):
        message = info['message']
        player = info['player']

        if not player.playing or not player.current:
            self.unregister_message(guild_id)
            return

        current_position = int(player.position)
        current_track = player.current

        force_update = False
        if info['track'] != current_track:
            info['track'] = current_track
            force_update = True

        if not force_update and abs(current_position - info['last_update']) < 5:
            return

        info['last_update'] = current_position

        requester = info['requester']
        embed = create_now_playing_embed(current_track, player, requester)

        try:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª—ã–º embed
            old_embed = message.embeds[0] if message.embeds else None
            if not old_embed or old_embed.description != embed.description:
                await message.edit(embed=embed)
        except discord.NotFound:
            self.unregister_message(guild_id)
        except discord.Forbidden:
            self.unregister_message(guild_id)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä updater
now_playing_updater = NowPlayingUpdater()


def create_now_playing_embed(track: wavelink.Playable, player: HarmonyPlayer, requester: discord.Member) -> discord.Embed:
    """üéµ –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –≤ —Ç–æ—á–Ω–æ–º —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–∞"""
   
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
    artist = getattr(track, 'author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
    title = getattr(track, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
    uri = getattr(track, 'uri', '')
   
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    track_link = f"**[{title}]({uri})**" if uri else f"**{title}**"
   
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ - 9 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
    position = player.position
    duration = track.length
    progress_bar = create_progress_bar(position, duration, paused=player.paused, length=9)
   
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    current_time = format_duration(int(position))
    total_time = format_duration(int(duration)) if duration else "‚àû"
   
    # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
    description = f"{track_link}\n\n"
    description += f"> –ó–∞–ø—Ä–æ—Å –æ—Ç {requester.display_name}:\n"
    description += f"{progress_bar}\n\n"
    description += f"–ò–≥—Ä–∞–µ—Ç ‚Äî `[{current_time}/{total_time}]`"
   
    # –°–æ–∑–¥–∞–µ–º embed –±–µ–∑ —Ü–≤–µ—Ç–∞ (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
    embed = discord.Embed(
        title=artist,
        description=description,
        color=None
    )
   
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É —Ç—Ä–µ–∫–∞
    if hasattr(track, 'artwork') and track.artwork:
        embed.set_thumbnail(url=track.artwork)
    elif hasattr(track, 'thumbnail') and track.thumbnail:
        embed.set_thumbnail(url=track.thumbnail)
   
    return embed


def create_progress_bar(position: float, duration: float, paused: bool = False, length: int = 10) -> str:
    """üéõÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏ –∏ –∏–∫–æ–Ω–∫–æ–π –≤ –Ω–∞—á–∞–ª–µ"""

    # –ü–ª–µ–π –∏–ª–∏ –ø–∞—É–∑–∞ —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
    play_icon = Emojis.PROGRESS_PAUSE if paused else Emojis.PROGRESS_PLAY

    # –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
    if duration <= 0:
        return (
            play_icon +
            Emojis.PROGRESS_LINE_START +
            Emojis.PROGRESS_LINE_EMPTY * (length - 1) +
            Emojis.PROGRESS_LINE_END
        )

    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = min(length, max(0, int((position / duration) * length)))

    # –ù–∞—á–∞–ª–æ: –ø—É—Å—Ç–æ–µ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    if progress == 0:
        bar = Emojis.PROGRESS_LINE_START
    else:
        bar = Emojis.PROGRESS_LINE_START_FULL
        bar += Emojis.PROGRESS_LINE_FULL * (progress - 1)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    empty_segments = length - progress
    bar += Emojis.PROGRESS_LINE_EMPTY * empty_segments

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    bar += Emojis.PROGRESS_LINE_END

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞—Ä —Å –∏–∫–æ–Ω–∫–æ–π –ø–ª–µ–π/–ø–∞—É–∑–∞ –≤ –Ω–∞—á–∞–ª–µ
    return play_icon + bar


async def send_now_playing_message(channel, track: wavelink.Playable, player: HarmonyPlayer, requester: discord.Member) -> discord.Message:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

    embed = create_now_playing_embed(track, player, requester)

    # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞—ë–º view –±–µ–∑ message
    view = MusicControllerView(player, None)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await channel.send(embed=embed, view=view)

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ view (–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏)
    view.message = message

    # –û–±–Ω–æ–≤–ª—è–µ–º view (—Ç.–∫. —Ç–µ–ø–µ—Ä—å —É –Ω–µ—ë –µ—Å—Ç—å message)
    await message.edit(view=view)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await now_playing_updater.register_message(
        channel.guild.id,
        message,
        player,
        track,
        requester
    )

    return message


def create_track_embed_spotify_style(track: wavelink.Playable, player: HarmonyPlayer, requester: discord.Member) -> discord.Embed:
    """üéµ –°–æ–∑–¥–∞–Ω–∏–µ embed –≤ —Å—Ç–∏–ª–µ Spotify"""
   
    artist = getattr(track, 'author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
    title = getattr(track, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
    uri = getattr(track, 'uri', '')
   
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫
    track_link = f"**[{title}]({uri})**" if uri else f"**{title}**"
   
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    position = player.position
    duration = track.length
    progress_bar = create_progress_bar(position, duration, 9)  # 9 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
   
    # –í—Ä–µ–º—è
    current_time = format_duration(int(position))
    total_time = format_duration(int(duration)) if duration else "‚àû"
   
    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = f"{track_link}\n\n"
    description += f"> –ó–∞–ø—Ä–æ—Å –æ—Ç {requester.display_name}:\n"
    description += f"{progress_bar}\n\n"
    description += f"–ò–≥—Ä–∞–µ—Ç ‚Äî `[{current_time}/{total_time}]`"
   
    embed = discord.Embed(
        title=artist,
        description=description,
        color=Colors.SPOTIFY
    )
   
    # –û–±–ª–æ–∂–∫–∞
    if hasattr(track, 'artwork') and track.artwork:
        embed.set_thumbnail(url=track.artwork)
   
    return embed


def create_queue_embed_advanced(queue: wavelink.Queue, page: int, current: Optional[wavelink.Playable], player: HarmonyPlayer) -> discord.Embed:
    """üìã –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π embed –¥–ª—è –æ—á–µ—Ä–µ–¥–∏"""
   
    embed = discord.Embed(
        title=f"{Emojis.QUEUE} –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
        color=Colors.SPOTIFY
    )
   
    per_page = 10
    total_tracks = len(queue)
    total_pages = max(1, math.ceil(total_tracks / per_page))
    page = max(1, min(page, total_pages))
   
    start = (page - 1) * per_page
    end = start + per_page
   
    # –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    if current:
        position = player.position
        duration = current.length
        progress = int((position / duration) * 10) if duration else 0
        progress_bar = "‚ñ∞" * progress + "‚ñ±" * (10 - progress)
       
        current_info = f"**[{current.title}]({getattr(current, 'uri', '')})**\n"
        current_info += f"*{getattr(current, 'author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}*\n"
        current_time = format_duration(int(position))
        total_time = format_duration(int(duration)) if duration else "‚àû"
        current_info += f"`{current_time}` {progress_bar} `{total_time}`"
       
        embed.add_field(
            name="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
            value=current_info,
            inline=False
        )
   
    # –¢—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    if queue:
        queue_text = ""
        for i, track in enumerate(queue[start:end], start=start + 1):
            duration_str = format_duration(int(track.length)) if hasattr(track, 'length') and track.length else "N/A"
            queue_text += f"`{i}.` **{track.title}**\n"
            queue_text += f"    *{getattr(track, 'author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}* ‚Ä¢ `{duration_str}`\n\n"
       
        embed.add_field(
            name="üìã –°–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–µ–∫–∏",
            value=queue_text or "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞",
            inline=False
        )
    else:
        embed.add_field(
            name="üìã –û—á–µ—Ä–µ–¥—å",
            value="–ü—É—Å—Ç–æ",
            inline=False
        )
   
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if total_pages > 1:
        embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages} ‚Ä¢ {total_tracks} —Ç—Ä–µ–∫–æ–≤")
    else:
        embed.set_footer(text=f"{total_tracks} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏")
   
    return embed


def create_error_embed(title: str, description: str) -> discord.Embed:
    """‚ùå –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è –æ—à–∏–±–æ–∫"""
    return discord.Embed(
        title=f"{Emojis.ERROR} {title}",
        description=description,
        color=Colors.ERROR
    )


def create_success_embed(title: str, description: str) -> discord.Embed:
    """‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    return discord.Embed(
        title=f"{Emojis.SUCCESS} {title}",
        description=description,
        color=Colors.SUCCESS
    )


def create_warning_embed(title: str, description: str) -> discord.Embed:
    """‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""
    return discord.Embed(
        title=f"{Emojis.WARNING} {title}",
        description=description,
        color=Colors.WARNING
    )


def create_info_embed(title: str, description: str) -> discord.Embed:
    """‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ embed –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    return discord.Embed(
        title=f"{Emojis.INFO} {title}",
        description=description,
        color=Colors.INFO
    )


def create_track_embed(track: wavelink.Playable, title: str = None, color = None, player: HarmonyPlayer = None, requester: discord.Member = None) -> discord.Embed:
    """üéµ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embed —Ç—Ä–µ–∫–∞"""
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã player –∏ requester, –∏—Å–ø–æ–ª—å–∑—É–µ–º create_now_playing_embed
    if player and requester and hasattr(player, 'position'):
        return create_now_playing_embed(track, player, requester)
    
    # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π embed –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    artist = getattr(track, 'author', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
    track_title = getattr(track, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
    uri = getattr(track, 'uri', '')
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫
    track_link = f"**[{track_title}]({uri})**" if uri else f"**{track_title}**"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π title –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    embed_title = title if title else artist
    embed_color = color if color else Colors.SUCCESS
    
    embed = discord.Embed(
        title=embed_title,
        description=track_link,
        color=embed_color
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É —Ç—Ä–µ–∫–∞
    if hasattr(track, 'artwork') and track.artwork:
        embed.set_thumbnail(url=track.artwork)
    elif hasattr(track, 'thumbnail') and track.thumbnail:
        embed.set_thumbnail(url=track.thumbnail)
    
    return embed


def create_queue_embed(queue: wavelink.Queue, page: int = 1, current: Optional[wavelink.Playable] = None, player: HarmonyPlayer = None) -> discord.Embed:
    """üìã Alias –¥–ª—è create_queue_embed_advanced –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return create_queue_embed_advanced(queue, page, current, player)


# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
def cleanup_updater():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    now_playing_updater.stop_updater()
