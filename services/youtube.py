import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from config.settings import Settings
import wavelink
import logging

class SpotifyService:
    """üéµ –°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ Spotify"""
   
    def __init__(self):
        self.logger = logging.getLogger('SpotifyService')
        if not Settings.SPOTIFY_CLIENT_ID or not Settings.SPOTIFY_CLIENT_SECRET:
            self.sp = None
            self.logger.warning("‚ö†Ô∏è Spotify –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return
           
        try:
            self.sp = spotipy.Spotify(
                client_credentials_manager=SpotifyClientCredentials(
                    client_id=Settings.SPOTIFY_CLIENT_ID,
                    client_secret=Settings.SPOTIFY_CLIENT_SECRET
                )
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
            self.sp.search("test", limit=1)
            self.logger.info("‚úÖ Spotify API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.sp = None
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Spotify: {e}")
   
    async def get_tracks(self, url: str) -> wavelink.Playlist | list[wavelink.Playable] | None:
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ Spotify URL"""
        if not self.sp:
            self.logger.warning("Spotify API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
       
        try:
            if 'track' in url:
                self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ Spotify —Ç—Ä–µ–∫–∞: {url}")
                track = self.sp.track(url)
                query = f"{track['name']} {track['artists'][0]['name']}"
                self.logger.info(f"–ü–æ–∏—Å–∫ –≤ YouTube: {query}")
                
                tracks = await wavelink.Playable.search(query, source=wavelink.TrackSource.YouTube)
                if tracks:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤")
                    return tracks
                else:
                    self.logger.warning(f"–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                    return None
               
            elif 'playlist' in url:
                self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ Spotify –ø–ª–µ–π–ª–∏—Å—Ç–∞: {url}")
                playlist = self.sp.playlist(url)
                tracks = []
                
                for item in playlist['tracks']['items']:
                    if not item['track']:
                        continue
                    track = item['track']
                    query = f"{track['name']} {track['artists'][0]['name']}"
                    results = await wavelink.Playable.search(query, source=wavelink.TrackSource.YouTube)
                    if results:
                        tracks.append(results[0])
               
                if tracks:
                    return wavelink.Playlist(
                        name=playlist['name'],
                        tracks=tracks
                    )
                return None
               
            elif 'album' in url:
                self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ Spotify –∞–ª—å–±–æ–º–∞: {url}")
                album = self.sp.album(url)
                tracks = []
                
                for item in album['tracks']['items']:
                    query = f"{item['name']} {album['artists'][0]['name']}"
                    results = await wavelink.Playable.search(query, source=wavelink.TrackSource.YouTube)
                    if results:
                        tracks.append(results[0])
               
                if tracks:
                    return wavelink.Playlist(
                        name=album['name'],
                        tracks=tracks
                    )
                return None
                
            else:
                self.logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø Spotify URL: {url}")
                return None
               
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Spotify: {e}")
            return None
