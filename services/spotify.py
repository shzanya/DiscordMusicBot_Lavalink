import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from config.settings import Settings
import wavelink
import logging


class SpotifyService:
    """üéµ –°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ Spotify —á–µ—Ä–µ–∑ Lavalink"""

    def __init__(self):
        self.logger = logging.getLogger("SpotifyService")
        if not Settings.SPOTIFY_CLIENT_ID or not Settings.SPOTIFY_CLIENT_SECRET:
            self.sp = None
            self.logger.warning("‚ö†Ô∏è Spotify –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return

        try:
            self.sp = spotipy.Spotify(
                client_credentials_manager=SpotifyClientCredentials(
                    client_id=Settings.SPOTIFY_CLIENT_ID,
                    client_secret=Settings.SPOTIFY_CLIENT_SECRET,
                )
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
            self.sp.search("test", limit=1)
            self.logger.info("‚úÖ Spotify API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.sp = None
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Spotify: {e}")

    async def get_tracks(
        self, url: str
    ) -> wavelink.Playlist | list[wavelink.Playable] | None:
        """üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ Spotify URL —á–µ—Ä–µ–∑ Lavalink"""
        if not self.sp:
            self.logger.warning("Spotify API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None

        try:
            # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ Spotify URL —á–µ—Ä–µ–∑ Lavalink (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
            tracks = await wavelink.Playable.search(url)

            if tracks:
                self.logger.info(f"‚úÖ Lavalink –Ω–∞—à–µ–ª {len(tracks)} Spotify —Ç—Ä–µ–∫–æ–≤")
                return tracks
            else:
                self.logger.warning(f"‚ùå Lavalink –Ω–µ –Ω–∞—à–µ–ª —Ç—Ä–µ–∫–∏ –¥–ª—è: {url}")
                # Fallback –Ω–∞ SoundCloud
                return await self._fallback_search(url)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Lavalink Spotify: {e}")
            # Fallback –Ω–∞ SoundCloud
            return await self._fallback_search(url)

    async def _fallback_search(
        self, url: str
    ) -> wavelink.Playlist | list[wavelink.Playable] | None:
        """üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SoundCloud –µ—Å–ª–∏ Spotify –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        if not self.sp:
            return None

        try:
            if "track" in url:
                self.logger.info("Fallback: –æ–±—Ä–∞–±–æ—Ç–∫–∞ Spotify —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ SoundCloud")
                track = self.sp.track(url)
                query = f"{track['name']} {track['artists'][0]['name']}"

                tracks = await wavelink.Playable.search(
                    query, source=wavelink.TrackSource.SoundCloud
                )
                if tracks:
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Spotify –∫ SoundCloud —Ç—Ä–µ–∫—É
                    tracks[0].spotify_id = track["id"]
                    tracks[0].spotify_url = url
                    return tracks

            elif "playlist" in url:
                self.logger.info(
                    "Fallback: –æ–±—Ä–∞–±–æ—Ç–∫–∞ Spotify –ø–ª–µ–π–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ SoundCloud"
                )
                playlist = self.sp.playlist(url)
                tracks = []

                for item in playlist["tracks"]["items"]:
                    if not item["track"]:
                        continue
                    track = item["track"]
                    query = f"{track['name']} {track['artists'][0]['name']}"
                    results = await wavelink.Playable.search(
                        query, source=wavelink.TrackSource.SoundCloud
                    )
                    if results:
                        # –î–æ–±–∞–≤–ª—è–µ–º Spotify –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        results[0].spotify_id = track["id"]
                        tracks.append(results[0])

                if tracks:
                    return wavelink.Playlist(name=playlist["name"], tracks=tracks)

            elif "album" in url:
                self.logger.info("Fallback: –æ–±—Ä–∞–±–æ—Ç–∫–∞ Spotify –∞–ª—å–±–æ–º–∞ —á–µ—Ä–µ–∑ SoundCloud")
                album = self.sp.album(url)
                tracks = []

                for item in album["tracks"]["items"]:
                    query = f"{item['name']} {album['artists'][0]['name']}"
                    results = await wavelink.Playable.search(
                        query, source=wavelink.TrackSource.SoundCloud
                    )
                    if results:
                        results[0].spotify_id = item["id"]
                        tracks.append(results[0])

                if tracks:
                    return wavelink.Playlist(name=album["name"], tracks=tracks)

            return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –ø–æ–∏—Å–∫–∞: {e}")
            return None

    def is_spotify_url(self, url: str) -> bool:
        """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Å—ã–ª–∫–æ–π Spotify"""
        return "spotify.com" in url or "open.spotify.com" in url
