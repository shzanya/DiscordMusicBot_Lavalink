"""
üìä –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
import wavelink
from typing import Optional


def format_duration(ms: int) -> str:
    """üìä –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ hh:mm:ss –∏–ª–∏ mm:ss"""
    if ms <= 0:
        return "00:00"

    seconds = ms // 1000
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)

    if hours > 0:
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    return f"{minutes:02d}:{seconds:02d}"


def format_track_info(track: wavelink.Playable) -> str:
    """üéµ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ"""
    duration = format_duration(track.length if track.length else 0)
    return f"**{track.title}** by **{track.author}** [{duration}]"


def format_track_title(track: wavelink.Playable, max_length: int = 50) -> str:
    """‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    title = getattr(track, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫')
    if len(title) > max_length:
        return title[:max_length-3] + "..."
    return title


def format_requester_info(requester: Optional[object]) -> str:
    """üë§ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if not requester:
        return "`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ`"
    
    if hasattr(requester, 'display_name'):
        return f"`{requester.display_name}`"
    elif hasattr(requester, 'name'):
        return f"`{requester.name}`"
    else:
        return "`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ`"


def format_queue_position(position: int) -> str:
    """üìç –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    if position == 1:
        return "—Å–ª–µ–¥—É—é—â–∏–π"
    elif position <= 5:
        return f"{position}-–π –≤ –æ—á–µ—Ä–µ–¥–∏"
    else:
        return f"#{position} –≤ –æ—á–µ—Ä–µ–¥–∏"


def truncate_text(text: str, max_length: int = 100) -> str:
    """‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def format_file_size(size_bytes: int) -> str:
    """üìÅ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"
