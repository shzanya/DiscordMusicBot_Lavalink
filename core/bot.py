import discord
from discord.ext import commands
import wavelink
import logging
import os
from pathlib import Path
from config.settings import Settings
from core.events import EventHandler
from core.assets import AutoEmojiManager

class HarmonyBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        intents.voice_states = True
        intents.guilds = True
        
        super().__init__(
            command_prefix=Settings.COMMAND_PREFIX,  # —É–±—Ä–∞–ª _get_prefix
            intents=intents,
            description="üéµ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è Discord",
            case_insensitive=True,
            strip_after_prefix=True
        )

        # self.db = DatabaseService()  <-- –£–¥–∞–ª–µ–Ω–æ
        self.ready = False
        self.logger = self.get_logger()
        self.synced = False
        self.loaded_cogs = []
          # –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–æ–≤

    async def setup_hook(self):
        """üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        await self.setup_emoji_manager()  # ‚úÖ –í—ã–∑–æ–≤

    async def setup_emoji_manager(self):
        """‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–º–æ–¥–∑–∏"""
        manager = AutoEmojiManager(self)
        await manager.auto_sync_emojis()
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Lavalink
        nodes = [
            wavelink.Node(
                identifier="HARMONY_NODE",
                uri=f"{'wss' if Settings.LAVALINK_SECURE else 'ws'}://{Settings.LAVALINK_HOST}:{Settings.LAVALINK_PORT}",
                password=Settings.LAVALINK_PASSWORD,
                heartbeat=30.0,
                retries=3
            )
        ]
        
        await wavelink.Pool.connect(
            nodes=nodes,
            client=self,
            cache_capacity=100
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        await self._load_cogs_from_structure()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        await self.add_cog(EventHandler(self))
        
        self.logger.info("üéµ Harmony Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

    async def _load_cogs_from_structure(self):
        """üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –∫–æ–≥–∞–º–∏
        cog_structure = {
            'commands/music': [
                'playback',
                'queue',
                'effects',
                # 'favorites',  # ‚õî ModuleNotFoundError: services.database
                # 'lyrics',     # ‚õî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                # 'radio'       # ‚õî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            ],
            'commands/playlist': [
                # 'management',     # ‚õî ModuleNotFoundError
                # 'sharing',        # ‚õî ModuleNotFoundError
                # 'import_export'   # ‚õî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            ],
            'commands/admin': [
                # 'settings',     # ‚õî ModuleNotFoundError
                # 'permissions',  # ‚õî ModuleNotFoundError
                # 'moderation'    # ‚õî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            ],
            'commands/utility': [
                # 'help',   # ‚õî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                # 'info',   # ‚õî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                # 'stats'   # ‚õî —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            ],
            'commands/Emoji': [
                'EmojiManager'
            ]
        }

        self.logger.info("üìÇ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–≥–æ–≤...")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–≥–æ–≤
        await self._unload_all_cogs()
        
        total_loaded = 0
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for folder_path, cog_names in cog_structure.items():
            category_name = folder_path.split('/')[-1]
            self.logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name.upper()}")
            
            loaded_in_category = 0
            
            for cog_name in cog_names:
                success = await self._load_single_cog(folder_path, cog_name)
                if success:
                    loaded_in_category += 1
                    total_loaded += 1
            
            self.logger.info(f"‚úÖ {category_name.upper()}: {loaded_in_category}/{len(cog_names)} –∫–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ __init__.py —Ñ–∞–π–ª–æ–≤
        await self._load_cogs_from_init_files()
        
        self.logger.info(f"üéØ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_loaded} –∫–æ–≥–æ–≤")

    async def _load_single_cog(self, folder_path: str, cog_name: str) -> bool:
        """üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–æ–≥–∞"""
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–µ–π
        possible_paths = [
            f"{folder_path}/{cog_name}.py",
            f"{folder_path}/{cog_name}/main.py",
            f"{folder_path}/{cog_name}/__init__.py"
        ]
        
        for file_path in possible_paths:
            if os.path.exists(file_path):
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–π –ø—É—Ç—å
                    module_path = file_path.replace('/', '.').replace('\\', '.').replace('.py', '')
                    
                    await self.load_extension(module_path)
                    self.loaded_cogs.append(module_path)
                    self.logger.info(f"  ‚úÖ {cog_name}")
                    return True
                    
                except Exception as e:
                    self.logger.error(f"  ‚ùå {cog_name}: {e}")
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª
        self.logger.warning(f"  ‚ö†Ô∏è {cog_name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    async def _load_cogs_from_init_files(self):
        """üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ –∏–∑ __init__.py —Ñ–∞–π–ª–æ–≤"""
        init_files = [
            'commands/music/__init__.py',
            'commands/playlist/__init__.py', 
            'commands/admin/__init__.py',
            'commands/utility/__init__.py'
        ]
        
        for init_file in init_files:
            if os.path.exists(init_file):
                try:
                    module_path = init_file.replace('/', '.').replace('\\', '.').replace('.py', '')
                    await self.load_extension(module_path)
                    self.loaded_cogs.append(module_path)
                    category = init_file.split('/')[1]
                    self.logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω __init__ –¥–ª—è {category}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {init_file}: {e}")

    async def _discover_and_load_all_cogs(self):
        """üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–≥–æ–≤"""
        commands_dir = Path('commands')
        
        if not commands_dir.exists():
            self.logger.warning("üìÅ –ü–∞–ø–∫–∞ commands –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        self.logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–æ–≥–æ–≤...")
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ—Ö .py —Ñ–∞–π–ª–æ–≤
        for py_file in commands_dir.rglob('*.py'):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            if py_file.name.startswith('_') and py_file.name != '__init__.py':
                continue
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –º–æ–¥—É–ª—è
            relative_path = py_file.relative_to(Path('.'))
            module_path = str(relative_path).replace(os.sep, '.').replace('.py', '')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ
            if module_path in self.loaded_cogs:
                continue
            
            try:
                await self.load_extension(module_path)
                self.loaded_cogs.append(module_path)
                self.logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω: {module_path}")
            except Exception as e:
                self.logger.debug(f"üîç –ü—Ä–æ–ø—É—â–µ–Ω {module_path}: {e}")

    async def _unload_all_cogs(self):
        """üóëÔ∏è –í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–≥–æ–≤"""
        extensions_to_unload = list(self.extensions.keys())
        
        for extension in extensions_to_unload:
            try:
                await self.unload_extension(extension)
                self.logger.debug(f"üóëÔ∏è –í—ã–≥—Ä—É–∂–µ–Ω: {extension}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ {extension}: {e}")
        
        self.loaded_cogs.clear()

    async def on_ready(self):
        """üöÄ –°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        if self.ready:
            return
        self.ready = True
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥
        if not self.synced:
            try:
                synced = await self.tree.sync()
                self.logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} slash –∫–æ–º–∞–Ω–¥")
                self.synced = True
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        
        self.logger.info(f"üéµ {self.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        self.logger.info(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {len(self.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º")
        self.logger.info(f"üë• –û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç {len(self.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        self.logger.info(f"‚öôÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.loaded_cogs)} –∫–æ–≥–æ–≤")
        
        await self.change_presence(
            status=discord.Status.online,
            activity=discord.Activity(
                type=discord.ActivityType.listening,
                name=f"{Settings.COMMAND_PREFIX}help | üéµ –ú—É–∑—ã–∫–∞ –¥–ª—è –≤—Å–µ—Ö"
            )
        )

    async def reload_cogs(self, category: str = None):
        """üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤"""
        if category:
            self.logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cogs_to_reload = [cog for cog in self.loaded_cogs if f'commands.{category}' in cog]
            
            for cog in cogs_to_reload:
                try:
                    await self.reload_extension(cog)
                    self.logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω: {cog}")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ {cog}: {e}")
        else:
            self.logger.info("üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–≥–æ–≤...")
            await self._load_cogs_from_structure()
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥
        try:
            synced = await self.tree.sync()
            self.logger.info(f"üîÑ –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} slash –∫–æ–º–∞–Ω–¥")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        
        self.logger.info("‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def get_logger(self):
        """üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞"""
        return logging.getLogger(f'HarmonyBot.{self.__class__.__name__}')

    async def get_cog_info(self):
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–∞—Ö"""
        info = {
            'total_cogs': len(self.loaded_cogs),
            'categories': {},
            'loaded_cogs': self.loaded_cogs
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for cog in self.loaded_cogs:
            if 'commands.' in cog:
                category = cog.split('.')[1] if len(cog.split('.')) > 1 else 'other'
                if category not in info['categories']:
                    info['categories'][category] = []
                info['categories'][category].append(cog)
        
        return info


    async def on_guild_remove(self, guild):
        """üëã –°–æ–±—ã—Ç–∏–µ –ø–æ–∫–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        self.logger.info(f"üëã –ü–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä: {guild.name} ({guild.id})")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
async def setup_dev_commands(bot: HarmonyBot):
    """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    @bot.tree.command(name="reload", description="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–≥–∏")
    async def reload_command(interaction: discord.Interaction, category: str = None):
        if interaction.user.id != 123456789:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
            return
            
        await interaction.response.defer()
        await bot.reload_cogs(category)
        
        if category:
            await interaction.followup.send(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        else:
            await interaction.followup.send("‚úÖ –í—Å–µ –∫–æ–≥–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
    @bot.tree.command(name="coginfo", description="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–∞—Ö")
    async def coginfo_command(interaction: discord.Interaction):
        if interaction.user.id != 123456789:  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π ID
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", ephemeral=True)
            return
        
        info = await bot.get_cog_info()
        
        embed = discord.Embed(
            title="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–≥–∞—Ö",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"–í—Å–µ–≥–æ –∫–æ–≥–æ–≤: {info['total_cogs']}",
            inline=False
        )
        
        for category, cogs in info['categories'].items():
            cog_list = '\n'.join([f"‚Ä¢ {cog.split('.')[-1]}" for cog in cogs])
            embed.add_field(
                name=f"üìÅ {category.upper()}",
                value=cog_list or "–ù–µ—Ç –∫–æ–≥–æ–≤",
                inline=True
            )
        
        await interaction.response.send_message(embed=embed)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    bot = HarmonyBot()
    
    # –î–æ–±–∞–≤–ª—è–µ–º dev –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    # await setup_dev_commands(bot)
    
    # bot.run(Settings.DISCORD_TOKEN)
